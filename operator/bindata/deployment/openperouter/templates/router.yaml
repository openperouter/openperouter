apiVersion: v1
kind: ConfigMap
metadata:
  name: frr-startup
  namespace: {{ .Release.Namespace | quote }}
data:
  daemons: |
    # This file tells the frr package which daemons to start.
    #
    # Sample configurations for these daemons can be found in
    # /usr/share/doc/frr/examples/.
    #
    # ATTENTION:
    #
    # When activating a daemon for the first time, a config file, even if it is
    # empty, has to be present *and* be owned by the user and group "frr", else
    # the daemon will not be started by /etc/init.d/frr. The permissions should
    # be u=rw,g=r,o=.
    # When using "vtysh" such a config file is also needed. It should be owned by
    # group "frrvty" and set to ug=rw,o= though. Check /etc/pam.d/frr, too.
    #
    # The watchfrr and zebra daemons are always started.
    #
    bgpd=yes
    ospfd=no
    ospf6d=no
    ripd=no
    ripngd=no
    isisd=no
    pimd=no
    ldpd=no
    nhrpd=no
    eigrpd=no
    babeld=no
    sharpd=no
    pbrd=no
    bfdd=yes
    fabricd=no
    vrrpd=no

    #
    # If this option is set the /etc/init.d/frr script automatically loads
    # the config via "vtysh -b" when the servers are started.
    # Check /etc/pam.d/frr if you intend to use "vtysh"!
    #
    vtysh_enable=yes
    zebra_options="  -A 127.0.0.1 -s 90000000 --limit-fds 100000"
    bgpd_options="   -A 127.0.0.1 --limit-fds 100000"
    ospfd_options="  -A 127.0.0.1"
    ospf6d_options=" -A ::1"
    ripd_options="   -A 127.0.0.1"
    ripngd_options=" -A ::1"
    isisd_options="  -A 127.0.0.1"
    pimd_options="   -A 127.0.0.1"
    ldpd_options="   -A 127.0.0.1"
    nhrpd_options="  -A 127.0.0.1"
    eigrpd_options=" -A 127.0.0.1"
    babeld_options=" -A 127.0.0.1"
    sharpd_options=" -A 127.0.0.1"
    pbrd_options="   -A 127.0.0.1"
    staticd_options="-A 127.0.0.1 --limit-fds 100000"
    bfdd_options="   -A 127.0.0.1 --limit-fds 100000"
    fabricd_options="-A 127.0.0.1"
    vrrpd_options="  -A 127.0.0.1"

    # configuration profile
    #
    #frr_profile="traditional"
    #frr_profile="datacenter"

    #
    # This is the maximum number of FD's that will be available.
    # Upon startup this is read by the control files and ulimit
    # is called. Uncomment and use a reasonable value for your
    # setup if you are expecting a large number of peers in
    # say BGP.
    #MAX_FDS=1024

    # The list of daemons to watch is automatically generated by the init script.
    #watchfrr_options=""

    # for debugging purposes, you can specify a "wrap" command to start instead
    # of starting the daemon directly, e.g. to use valgrind on ospfd:
    #   ospfd_wrap="/usr/bin/valgrind"
    # or you can use "all_wrap" for all daemons, e.g. to use perf record:
    #   all_wrap="/usr/bin/perf record --call-graph -"
    # the normal daemon command is added to this at the end.
  frr.conf: |
    ! This file gets overriden the first time the speaker renders a config.
    ! So anything configured here is only temporary.
    frr version 8.0
    frr defaults traditional
    hostname Router
    line vty
    log file /etc/frr/frr.log informational
  vtysh.conf: |
    service integrated-vtysh-config
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    {{- include "openperouter.labels" . | nindent 4 }}
    component: router
    {{- range $key, $value := .Values.openperouter.labels }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
  name: router
  namespace: {{ .Release.Namespace | quote }}
spec:
  {{- if .Values.openperouter.updateStrategy }}
  updateStrategy: {{- toYaml .Values.openperouter.updateStrategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "openperouter.selectorLabels" . | nindent 6 }}
      component: router
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: router
        {{- if .Values.openperouter.multusNetworkAnnotation }}
        k8s.v1.cni.cncf.io/networks: {{ .Values.openperouter.multusNetworkAnnotation | quote }}
        {{- end }}
      labels:
        {{- include "openperouter.selectorLabels" . | nindent 8 }}
        component: router
        app: router
        {{- range $key, $value := .Values.openperouter.labels }}
        {{ $key }}: {{ $value | quote }}
        {{- end }}
    spec:
      {{- if .Values.openperouter.runtimeClassName }}
      runtimeClassName: {{ .Values.openperouter.runtimeClassName }}
      {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ template "openperouter.router.serviceAccountName" . }}
      containers:
      - name: frr
        securityContext:
          capabilities:
            add: ["NET_ADMIN", "NET_RAW", "SYS_ADMIN", "NET_BIND_SERVICE"]
        image: {{ .Values.openperouter.frr.image.repository }}:{{ .Values.openperouter.frr.image.tag }}
        {{- if .Values.openperouter.image.pullPolicy }}
        imagePullPolicy: {{ .Values.openperouter.image.pullPolicy }}
        {{- end }}
        env:
          - name: TINI_SUBREAPER
            value: "true"
        volumeMounts:
          - name: frr-sockets
            mountPath: /var/run/frr
          - name: frrconfig
            mountPath: /etc/frr
        # The command is FRR's default entrypoint & waiting for the log file to appear and tailing it.
        # If the log file isn't created in 60 seconds the tail fails and the container is restarted.
        # This workaround is needed to have the frr logs as part of kubectl logs -c frr < k8s-frr-podname >.
        command:
          - /bin/sh
          - -c
          - |
            /sbin/tini -- /usr/lib/frr/docker-start &
            attempts=0
            until [[ -f /etc/frr/frr.log || $attempts -eq 60 ]]; do
              sleep 1
              attempts=$(( $attempts + 1 ))
            done
            tail -f /etc/frr/frr.log
        {{- with .Values.openperouter.frr.resources }}
        resources:
          {{- toYaml . | nindent 12 }}
        {{- end }}
      - name: reloader
        image: {{ .Values.openperouter.frr.image.repository }}:{{ .Values.openperouter.frr.image.tag }}
        {{- if .Values.openperouter.image.pullPolicy }}
        imagePullPolicy: {{ .Values.openperouter.image.pullPolicy }}
        {{- end }}
        command: ["/etc/frr_reloader/reloader"]
        args:
        - "--frrconfig=/etc/perouter/frr.conf"
        {{- with .Values.openperouter.logLevel }}
        - --loglevel={{ . }}
        {{- end }}
        volumeMounts:
          - name: frrconfig
            mountPath: /etc/frr
          - name: frr-sockets
            mountPath: /var/run/frr
          - name: frrsharedconfig
            mountPath: /etc/perouter
          - name: reloader
            mountPath: /etc/frr_reloader
        ports:
        - containerPort: 9080
          name: health
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /readyz
            port: 9080
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 1
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /healthz
            port: 9080
          initialDelaySeconds: 15
          periodSeconds: 20
          timeoutSeconds: 1
          failureThreshold: 3
        {{- with .Values.openperouter.frr.reloader.resources }}
        resources:
          {{- toYaml . | nindent 12 }}
        {{- end }}
      tolerations:
      {{- if .Values.openperouter.runOnMaster }}
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
        operator: Exists
      - effect: NoSchedule
        key: node-role.kubernetes.io/control-plane
        operator: Exists
      {{- end }}
      {{- with .Values.openperouter.tolerations }}
        {{- toYaml . | nindent 6 }}
      {{- end }}
      {{- with .Values.openperouter.priorityClassName }}
      priorityClassName: {{ . | quote }}
      {{- end }}
      volumes:
        - name: frr-sockets
          emptyDir: {}
        - name: frr-startup
          configMap:
            name: frr-startup
        - name: reloader
          emptyDir: {}
        - name: frrsharedconfig
          hostPath:
            path: /etc/perouter/frr
            type: DirectoryOrCreate
        - name: frrconfig
          emptyDir: {}
      initContainers:
        # Copies the initial config files with the right permissions to the shared volume.
        - name: cp-frr-files
          image: {{ .Values.openperouter.frr.image.repository }}:{{ .Values.openperouter.frr.image.tag }}
          {{- if .Values.openperouter.image.pullPolicy }}
          imagePullPolicy: {{ .Values.openperouter.image.pullPolicy }}
          {{- end }}
          command: ["/bin/sh", "-c", "cp -rLf /tmp/frr/* /etc/frr/"]
          volumeMounts:
            - name: frr-startup
              mountPath: /tmp/frr
            - name: frrconfig
              mountPath: /etc/frr
        # Copies the reloader to the shared volume between the k8s-frr controller and reloader.
        - name: cp-reloader
          image: {{ .Values.openperouter.image.repository }}:{{ .Values.openperouter.image.tag | default .Chart.AppVersion }}
          {{- if .Values.openperouter.image.pullPolicy }}
          imagePullPolicy: {{ .Values.openperouter.image.pullPolicy }}
          {{- end }}
          command: ["/cp-tool", "/reloader", "/etc/frr_reloader/reloader"]
          volumeMounts:
            - name: reloader
              mountPath: /etc/frr_reloader
      terminationGracePeriodSeconds: 10
      shareProcessNamespace: true
